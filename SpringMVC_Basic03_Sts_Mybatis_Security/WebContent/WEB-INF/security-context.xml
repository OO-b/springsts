<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:security="http://www.springframework.org/schema/security"
 xsi:schemaLocation="http://www.springframework.org/schema/beans 
 					 http://www.springframework.org/schema/beans/spring-beans.xsd
  					 http://www.springframework.org/schema/security 
  					 http://www.springframework.org/schema/security/spring-security.xsd">

<!-- 1단계
	인증과 권한 기본설정(in-memory)방식으로 사용자 만들고 권한 설정하기
	
	· auto-config="true" : 나는 당신(security)가 제공하는 설정(로그인화면, Controller)을 그냥 쓰겠습니다.
	
	·
	-> 3.x.x => access => ROLE_USER
	-> 4.x.x => access => hasRole("ROLE_USER")
  -->
  
<!--   <security:http auto-config="true">
	<security:csrf disabled="true" />
	<security:intercept-url pattern="/customer/noticeDetail.htm" access="hasRole('ROLE_USER')"/> /customer/noticeDetail.htm리소스에 대해서 Role_USER권한이 있는 사람만 강제하겠다.
  	<security:intercept-url pattern="/customer/noticeReg.htm" access="hasRole('ROLE_ADMIN')"/> 글쓰기는 어드민만 강제 
  </security:http>
  <security:authentication-manager> 프로바이저를 제공할 수 있음. db에서 제공할거냐, 메모리로 제공할거냐
  	<security:authentication-provider>
  		<security:user-service>
  			<security:user name="inyoung" password="1004" authorities="ROLE_USER"/> authorities권한을 여러개 가질 수 있음
			<security:user name="admin" password="1004" authorities="ROLE_ADMIN, ROLE_USER"/> ADMIN, USER 모든권한 다 줌 
  		</security:user-service>
  	</security:authentication-provider>
  </security:authentication-manager> -->

<!-- ===============================================================================================================  --> 
 
  <!-- 2단계
  1단계 >> 로그인 자동화 처리 >> /login  >> Controller에서 id, pwd받아서 인증확인, 권한확인, session처리를 자동화시킴 
                       >> /logout >> 직접처리하는 형태로 해야함 
  
  http://localhost:8090/SpringMVC_Basic03_Sts_Mybatis_Security/login?error  - (원래)login 실패시 넘어가는 url 
  
   *form-login 속성값들 
	 · login-page : login form 페이지 URL
	 · username-parameter : form id의 name 속성값 (회원가입시 email을 키로쓰고싶으면 바꿀 수 있음)
	 · password-parameter : form pw의 name 속성값
	 · login-processing-url : form action 값 (security를 이용해 인증처리) - 원하는 controller 태우게 할 수 있음 
	 · default-target-url : 로그인 성공 시 이동 URL (원래 브라우저 특성은 로그인하면, 이전화면으로 돌아감)
	 · authentication-failure-url : 로그인 실패 시 이동 URL
	 · always-use-default-target : 'true' 로 하면 무조건 default-target-url 로 이동한다. 
	                               'false' 로 하면 authentication-success-handler 대로 redirect 된다.
	 · authentication-success-handler-ref : 로그인 성공 시 프로세스 정의, bean id 입력
		만약 최종 로그인일시를 DB에 기록해야한다면 handler로 처리하는게 좋겠다.
		res.sendRedirect 등으로 처리
		authentication-failure-handler-ref : 로그인 실패 시 프로세스 정의, bean id 입력


	*form-logout
	 · logout-url : 로그아웃 처리할 URL (security가 알아서 만들기 때문에, 이 경로로 요청만 하면된다)
	 · logout-success-url : 로그아웃 성공 시 이동 URL
	 · success-handler-ref : 로그아웃 성공 시 프로세스 정의, bean id 입력
	 · invalidate-session : 로그아웃 시 세션 삭제여부


	* session-management
	 · invalid-session-url : invalid session(세션 타임아웃 등) 일 때 이동 URL
   	 · max-sessions : 최대 허용 가능한 세션 수
	 · expired-url : 중복 로그인 발생시 이동 URL (처음 접속한 세션이 invalidate가 되고 다음 요청시 invalid-session-url로 이동)
	 · error-if-maximum-exceeded : max-sessions을 넘었을때 접속한 세션을 실패처리할지 여부 (expired-url와 얘중에 하나만 쓰면 될듯)

   -->
<!--    <security:http>
   		<security:csrf disabled="true"/>
   		<security:form-login login-page="/joinus/login.htm"   
   							 authentication-failure-url="/joinus/login.htm?error"/>
   							 security:form-login : 여기서 커스터마이징 할 수 있음// 커스터마이징할때 원래 기본적인 형태를 알아야 자동화가 가능함
   		<security:logout logout-success-url="/index.htm"/>
   		<security:intercept-url pattern="/customer/noticeDetail.htm" access="hasRole('ROLE_USER')"/>
  		<security:intercept-url pattern="/customer/noticeReg.htm" access="hasRole('ROLE_ADMIN')"/> 
   </security:http>
     <security:authentication-manager> 
     
  	<security:authentication-provider>
  		<security:user-service>
  			<security:user name="inyoung" password="1004" authorities="ROLE_USER"/> 
			<security:user name="admin" password="1004" authorities="ROLE_ADMIN, ROLE_USER"/> 
  		</security:user-service>
  	</security:authentication-provider>
  </security:authentication-manager>  -->
  
   <security:http>
   		<security:csrf disabled="true"/>
   		<security:form-login login-page="/joinus/login.htm"   
   							 authentication-failure-url="/joinus/login.htm?error"/>
   		<security:logout logout-success-url="/index.htm"/>
  		<security:intercept-url pattern="/customer/*Reg.htm" access="hasRole('ROLE_USER')" />
  		<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
   </security:http>
   <security:authentication-manager>
   <security:authentication-provider>
   <security:jdbc-user-service data-source-ref="driverManagerDataSource"
         users-by-username-query="SELECT USERID, pwd AS PASSWORD, 1 enabled FROM member where userid=?"
         authorities-by-username-query="select m.USERID , r.ROLE_NAME  
           from member m join roll r 
           on m.userid = r.userid 
           where m.userid=?"        
         />
         </security:authentication-provider>
   </security:authentication-manager>
  
</beans>