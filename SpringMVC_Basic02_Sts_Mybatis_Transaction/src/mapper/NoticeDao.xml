<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- NoticeDao(Interface)를 구현하는 구현부 클래스는 다 지우고, mapper에서 적용할거예요. -->

<!-- NoticeDao랑 동기화 = namespace -->
<mapper namespace="dao.NoticeDao">

 	<!--
 	파라미터가 2개 이상인경우  
 	1. getCount(String field, String query) >> hashMap
 	2. getCount(String field, String query) >> parameter가 2개 이상인경우 
 	   mybatis가 제공하는 파라미터 : param1, param2, param3  
 	   >> String field - param1
 	   >> String query - param2
 	3. parameter 1개 인경우, getNum(int i) >> 생략하거나, parameterType="int" >> i 이름
 	   1개인경우, param1을 지원하지 않음 
 	4. vo, dto 타입으로 받기 
 	-->
	<select id="getCount" resultType="int"> <!-- 게시물 건수를 받을거니까, int -->
		SELECT COUNT(*) CNT 
		FROM NOTICES 
		WHERE ${param1} LIKE '%${param2}%'
	</select>
	
	<!-- public List<Notice> getNotices(int page, String field, String query) 
		>>int page를 받아서 
		
		int srow = 1 + (page-1)*5;
  		int erow = 5 + (page-1)*5;
  		
  		int srow = 1 + (${param1}-1)*5; 
  		int erow = 5 + (${param1}-1)*5;
	-->
	<select id="getNotices" resultType="vo.Notice">
	SELECT * FROM
			(SELECT ROWNUM NUM, N.* 
			 FROM (SELECT * 
			       FROM NOTICES 
			       WHERE ${param2} LIKE '%{param3}' 
			       ORDER BY REGDATE DESC
			       ) N
			 )
	 WHERE NUM BETWEEN 1 + (${param1}-1)*5 AND 5 + (${param1}-1)*5
	</select>
	
<!-- 
		public Notice getNotice(String seq) 
	 -->
	<select id="getNotice" resultType="vo.Notice">
		SELECT seq,title,writer,content,regdate,hit,filesrc,filesrc2 
		FROM NOTICES 
		WHERE SEQ=#{seq}
	</select>
	<!--  
		public int delete(String seq)
		parameter 1개 생략 가능
	-->
	<delete id="delete">
		DELETE NOTICES WHERE SEQ=#{seq}
	</delete>
	
	<!--  
		public int update(Notice notice) 
		jdbcType=VARCHAR >> 값이 넘어오지 않으면 null 강제하는 방법
		파일수정 : null , null
		한개수정 : 1.jpg , null
		두개수정 : 1.jpg , 2.jpg
	-->
	<update id="update" parameterType="vo.Notice">
		UPDATE NOTICES 
		SET TITLE=#{title}, 
			CONTENT=#{content}, 
			FILESRC=#{fileSrc,jdbcType=VARCHAR} ,  
			FILESRC2=#{fileSrc2,jdbcType=VARCHAR} 
		WHERE SEQ=#{seq}
	</update>
	
	<!--  
		public int insert(Notice n)
	-->
	<!-- 
	<insert id="insert" parameterType="vo.Notice">
		INSERT INTO NOTICES(SEQ, TITLE, CONTENT, WRITER, REGDATE, HIT, FILESRC , FILESRC2) 
		VALUES((SELECT MAX(TO_NUMBER(SEQ))+1 FROM NOTICES), #{title}, #{content}, 'bituser', SYSDATE, 0, #{fileSrc,jdbcType=VARCHAR},#{fileSrc2,jdbcType=VARCHAR})
	</insert> 
	-->
	<insert id="insert" parameterType="vo.Notice">
		<selectKey order="BEFORE" keyProperty="seq" resultType="String">
			SELECT MAX(TO_NUMBER(SEQ))+1 FROM NOTICES
		</selectKey>
			INSERT INTO NOTICES(SEQ, TITLE, CONTENT, WRITER, REGDATE, HIT, FILESRC , FILESRC2) 
			VALUES(#{seq}, #{title}, #{content}, 'bituser', SYSDATE, 0, #{fileSrc,jdbcType=VARCHAR},#{fileSrc2,jdbcType=VARCHAR})
	</insert>
	
	
	<!-- public int updateOfMemberPoint(String userid) throws ClassNotFoundException, SQLException; -->
	<update id="updateOfMemberPoint">
	update member set point = nvl(point,0) + 1 where userid = #{userid}
	</update>
</mapper>





